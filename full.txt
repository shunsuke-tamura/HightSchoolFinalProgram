
#手書き保存

import pyautogui
import tkinter
import tkinter.ttk as ttk
from PIL import Image, ImageDraw
import time


class Application(tkinter.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        self.master.title('possword')

        self.pack()
        self.create_widgets()
        self.setup()

    def create_widgets(self):
        
             
        self.vr = tkinter.IntVar()
        self.vr.set(1)
        #self.write_radio = tkinter.Radiobutton(self, text='write', variable=self.vr, value=1, command=self.change_radio)
        #self.write_radio.grid(row=0, column=0)
        #self.erase_radio = tkinter.Radiobutton(self, text='erase', variable=self.vr, value=2, command=self.change_radio)
        #self.erase_radio.grid(row=0, column=1)

        self.clear_button = tkinter.Button(self, text='clear all', command=self.clear_canvas)
        self.clear_button.grid(row=0, column=2)

        self.save_button = tkinter.Button(self, text='Enter', command=self.save_canvas)
        self.save_button.grid(row=0, column=3)

        self.test_canvas = tkinter.Canvas(self, bg='white', width=1920, height=1080)
        self.test_canvas.grid(row=1, column=0, columnspan=4)
        self.test_canvas.bind('<B1-Motion>', self.paint)
        self.test_canvas.bind('<ButtonRelease-1>', self.reset)
        self.test_canvas.create_rectangle(185, 365, 535, 725, width = 10)
        self.test_canvas.create_rectangle(585, 365, 935, 725, width = 10)
        self.test_canvas.create_rectangle(980, 365, 1330, 725, width = 10)
        self.test_canvas.create_rectangle(1380, 365, 1730, 725, width = 10)
        
    def setup(self):
        self.old_x = None
        self.old_y = None
        self.color = 'black'
        self.eraser_on = False
        self.im = Image.new('RGB', (1920, 1080), 'white')
        self.draw = ImageDraw.Draw(self.im)

    def change_radio(self):
        if self.vr.get() == 1:
            self.eraser_on = False
        else:
            self.eraser_on = True

    def clear_canvas(self):
        self.test_canvas.delete(tkinter.ALL)
        self.test_canvas.create_rectangle(185, 365, 535, 725, width = 10)
        self.test_canvas.create_rectangle(585, 365, 935, 725, width = 10)
        self.test_canvas.create_rectangle(980, 365, 1330, 725, width = 10)
        self.test_canvas.create_rectangle(1380, 365, 1730, 725, width = 10)

    def save_canvas(self):
        s = pyautogui.screenshot()
        s.save('write_img.png')
        #切り取り

        import cv2
        import matplotlib.pyplot as plt
        import numpy as np

        img = cv2.imread("write_img.png")
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

        ret,thresh = cv2.threshold(gray,127,255,cv2.THRESH_BINARY)

        contours, hierarchy = cv2.findContours(thresh , cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE )


        menseki=[ ]

        for i in range(0, len(contours)):
            menseki.append([contours[i],cv2.contourArea(contours[i])])

        menseki.sort(key=lambda x: x[1], reverse=True)



        zahyou = []
        for n in range(1, 5):
            epsilon = 0.1*cv2.arcLength(menseki[n][0],True)
            approx = cv2.approxPolyDP(menseki[n][0],epsilon,True)
            zahyou.append(approx[0][0])
            #zahyou.append(approx[1][0])
            #zahyou.append(approx[2][0])
            #zahyou.append(approx[3][0])
            m = n - 1
            t = zahyou[m][1]
            d = zahyou[m][1] + 370
            l = zahyou[m][0]
            r = zahyou[m][0] + 360
            img1 = img[t : d, l : r]
            cv2.imwrite('write_{}.jpg'.format(n), img1)
            #cv2.drawContours(img, approx, -1,(0, 0, 255),10)

        #print(zahyou)
        #cv2.imwrite("result.png",img)

        #判別

        import numpy as np
        import keras
        from keras.models import Sequential, model_from_json
        import cv2
        import matplotlib.pyplot as plt
        import glob
        from PIL import Image

        # モデルの読み込み
        model = model_from_json(open('cnn_appraisal.json', 'r').read())
        # 重みの読み込み
        #model.load_weights('appraisal.h5')
        model.load_weights('appraisal_pc.h5')
        



        image_size = 64
        X = []
        #write = ["1_1", "1_2", "1_3", "1_4"]
        #write = ["4_1", "3_1", "2_1", "1_1"]
        write = ["write_1", "write_2", "write_3", "write_4"]
        for index, dat in enumerate(write):
            dir = "./" + dat
            files = glob.glob(dir + ".jpg")
            for i, file in enumerate(files):
                image = Image.open(file)
                image = image.convert("RGB")
                image = image.resize((image_size, image_size))
                data = np.asarray(image)
                data = data.astype('float32')
                data = data / 255.0
                data = data.reshape((1, 64, 64, 3))
                X.append(data)

        ans = []
        for index, dat in enumerate(X):
            ans_dat = model.predict(dat)
            ans_dat = np.argmax(ans_dat)
            ans.append(ans_dat)
        print(ans)
    
        evaluation = 0
        if ans[0] == 3 or ans[0] == 2 or ans[0] == 1 or ans[0] == 0:
            evaluation = evaluation + 1
        if ans[1] == 3 or ans[1] == 2 or ans[1] == 1 or ans[1] == 0:
            evaluation = evaluation + 1
        if ans[2] == 3 or ans[2] == 2 or ans[2] == 1 or ans[2] == 0:
            evaluation = evaluation + 1
        if ans[3] == 3 or ans[3] == 2 or ans[3] == 1 or ans[3] == 0:
            evaluation = evaluation + 1
            
        print(evaluation)
        
        def dest():
            root.destroy()
        
        if evaluation >= 3:
            print("--unlock--")
            self.test_canvas.create_rectangle(0, 355, 1920, 735, fill="#00ff00", width = 0)
            self.test_canvas.create_text(960, 540, font=("","150"), text='--unlock--')
            #root.after(2000,dest)

        else:
            print("--lock--")
            self.test_canvas.create_rectangle(0, 355, 1920, 735, fill="red", width = 0)
            self.test_canvas.create_text(960, 540, font=("","200"), text='--lock--')
            
    def paint(self, event):
        if self.eraser_on:
            paint_color = 'white'
        else:
            paint_color = 'black'
        if self.old_x and self.old_y:
            self.test_canvas.create_line(self.old_x, self.old_y, event.x, event.y, width=15.0, fill=paint_color, capstyle=tkinter.ROUND, smooth=tkinter.TRUE, splinesteps=36)
            self.draw.line((self.old_x, self.old_y, event.x, event.y), fill=paint_color, width=5)
        self.old_x = event.x
        self.old_y = event.y

    def reset(self, event):
        self.old_x, self.old_y = None, None

root = tkinter.Tk()
#root.attributes("-zoomed", "1")
app = Application(master=root)
app.mainloop()

